using Microsoft.AspNetCore.Mvc;
using System.Diagnostics;
using webpentester.Models;


using webpentester.AICoreController;
using Newtonsoft.Json;
using System.Xml.Serialization;
using System;

namespace webpentester.Controllers
{
    public class HomeController : Controller
    {
        private readonly ILogger<HomeController> _logger;

        // Use dependency injection to get the controller instance
        private NeuralNet _neuralNet = new NeuralNet();

        public HomeController(ILogger<HomeController> logger)
        {
            _logger = logger;
        }

        public IActionResult Index()
        {
            TrainNeuralNetwork();
            return View();
        }

        public IActionResult Privacy()
        {
            TrainNeuralNetwork();
            return View();
        }


        public  async Task<ActionResult> TrainNeuralNetwork()
        {
            // Perform synchronous work on the current thread

            await Task.Run(() =>
            {
                double high = 0.9;
                double low = 0.1;
                double mid = 0.5;

                _neuralNet.Initialize(1, 2, 2, 1);


                double[][] input = new double[4][];
                input[0] = new double[] { high, high };
                input[1] = new double[] { low, high };
                input[2] = new double[] { high, low };
                input[3] = new double[] { low, low };

                double[][] output = new double[4][];
                output[0] = new double[] { low };
                output[1] = new double[] { high };
                output[2] = new double[] { high };
                output[3] = new double[] { low };

                double ll, lh, hl, hh;
                int count = 0;

                do
                {
                    count++;
                    for (int i = 0; i < 100; i++)
                        _neuralNet.Train(input, output);

                    _neuralNet.ApplyLearning();

                    _neuralNet.InputLayer[0].Output = low;
                    _neuralNet.InputLayer[1].Output = low;
                    _neuralNet.Pulse();
                    ll = _neuralNet.OutputLayer[0].Output;

                    _neuralNet.InputLayer[0].Output = high;
                    _neuralNet.InputLayer[1].Output = low;
                    _neuralNet.Pulse();
                    hl = _neuralNet.OutputLayer[0].Output;

                    _neuralNet.InputLayer[0].Output = low;
                    _neuralNet.InputLayer[1].Output = high;
                    _neuralNet.Pulse();
                    lh = _neuralNet.OutputLayer[0].Output;

                    _neuralNet.InputLayer[0].Output = high;
                    _neuralNet.InputLayer[1].Output = high;
                    _neuralNet.Pulse();
                    hh = _neuralNet.OutputLayer[0].Output;
                }
                while (hh > mid || lh < mid || hl < mid || ll > mid);

                XmlSerializer oSerialiser = new XmlSerializer(typeof(NeuralNet));
                Stream oStream = new FileStream(@"model.xml", FileMode.Create);
                oSerialiser.Serialize(oStream, _neuralNet);
                oStream.Close();

                System.Diagnostics.Debug.WriteLine((count * 100).ToString() + " iterations required for training");

            });

            // Continue with the rest of the action

            return Ok();
        }

        [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]
        public IActionResult Error()
        {
            return View(new ErrorViewModel { RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier });
        }

    }
}