using Microsoft.AspNetCore.Mvc;
using System.Diagnostics;
using webpentester.Models;
using System.Net.Http;
using AngleSharp.Html.Parser;
using System.Threading.Tasks;
using System.Collections.Generic;
using System.Linq;
using Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http;

namespace webpentester.Controllers
{
    public class CrawlerController : Controller
    {
        private readonly ILogger<CrawlerController> _logger;

        public CrawlerController(ILogger<CrawlerController> logger)
        {
            _logger = logger;
        }

        public IActionResult Index()
        {
            return View();
        }

        public IActionResult Privacy()
        {
            return View();
        }

        [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]
        public IActionResult Error()
        {
            return View(new ErrorViewModel { RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier });
        }
        public async Task<IActionResult> CrawlWebPage()
        {
            // Create an instance of HttpClient
            using (var httpClient = new HttpClient())
            {
                // Send a GET request to the webpage
                var response = await httpClient.GetAsync("https://www.example.com");

                // Ensure the response is successful
                if (response.IsSuccessStatusCode)
                {
                    // Read the content of the response
                    var htmlContent = await response.Content.ReadAsStringAsync();

                    // Load the HTML content into AngleSharp's HTML parser
                    var htmlParser = new HtmlParser();
                    var document = await htmlParser.ParseDocumentAsync(htmlContent);

                    // TODO: Perform web scraping or extract desired information from the webpage
                    // For example, you can use CSS selectors to select specific elements from the HTML document
                    var pageTitle = document.QuerySelector("title")?.TextContent;

                    // Return the crawled data to the view or perform further processing
                    return View();
                }
                else
                {
                    // Handle the case when the request was not successful
                    // You can return an error view or handle it based on your requirements
                    return View("Error");
                }
            }

        }
            public async Task<IActionResult> CrawlWebPage1()
        {
            using (var httpClient = new HttpClient())
            {
                var response = await httpClient.GetAsync("https://www.example.com");

                if (response.IsSuccessStatusCode)
                {
                    var htmlContent = await response.Content.ReadAsStringAsync();

                    var htmlParser = new HtmlParser();
                    var document = await htmlParser.ParseDocumentAsync(htmlContent);

                    // Perform web scraping or extract desired information from the webpage
                    var titles = GetPageTitles(document);
                    var links = GetPageLinks(document);
                    var images = GetPageImages(document);
                    var forms = GetPageForms(document);

                    var crawledData = new CrawlResultViewModel
                    {
                        Titles = titles,
                        Links = links,
                        Images = images,
                        Forms = forms
                    };

                    // Return the crawled data to the view or perform further processing
                    return View(crawledData);
                }
                else
                {
                    return View("Error");
                }
            }
        }

        private List<string> GetPageTitles(AngleSharp.Dom.IDocument document)
        {
            var titles = document.QuerySelectorAll("h1, h2, h3")
                                 .Select(titleElement => titleElement.TextContent)
                                 .ToList();

            return titles;
        }

        private List<string> GetPageLinks(AngleSharp.Dom.IDocument document)
        {
            var links = document.QuerySelectorAll("a[href]")
                                .Select(linkElement => linkElement.GetAttribute("href"))
                                .ToList();

            return links;
        }

        private List<string> GetPageImages(AngleSharp.Dom.IDocument document)
        {
            var images = document.QuerySelectorAll("img[src]")
                                 .Select(imgElement => imgElement.GetAttribute("src"))
                                 .ToList();

            return images;
        }

        private List<string> GetPageForms(AngleSharp.Dom.IDocument document)
        {
            var forms = document.QuerySelectorAll("form")
                                .Select(formElement => formElement.OuterHtml)
                                .ToList();

            return forms;
        }

        // Add additional action methods and functionality for web crawling
        // ...

        // Helper methods for web crawling
        // ...
    }
}